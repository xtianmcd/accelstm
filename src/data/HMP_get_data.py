import pandas as pd
import numpy as np
import csv
import os

def get_labels(mainfolder):
    """
    Creates a dictionary of labels for each unique type of motion.

    Parameters
    --------------
    mainfolder: the filepath for the folder containing the data
                (i.e., filepath to HMP_Dataset)

    Returns
    --------------
    labels: dict of numeric label for each activity

    """
    labels = {}
    label  = 0
    for folder in os.listdir(mainfolder):
        fpath = mainfolder + "/" + folder
        if os.path.isdir(fpath) and "MODEL" not in folder:
            for filename in os.listdir(fpath):
                fullpath = fpath + "/" + filename
                labels[fullpath] = label
            #labels[folder] = label # key = activity; value = label
            label += 1
    return labels

def get_data(fp, labels):
    """
    Extracts data from the given filepath, determines its corresponding label
    and generates one-hot encoding

    Parameters:
    --------------
    fp:      filepath containing data
    labels:  dict of labels for each filepath, generated by get_labels()

    Returns:
    --------------
    arr:     np array containing a single record's tri-axial data with dimension
             (num time steps, 3)
    one_hot: one_hot encoded label for the given record's activity

    """
    data = pd.read_csv(filepath_or_buffer=fp, sep=' ', names = ["X", "Y", "Z"])
    if data.isnull().values.any(): print("NULL VALUES")
    # arrange entire file into single row
    # (each file = one record for a single activity)
    arr = np.asarray([np.asarray(row) for idx, row in data.iterrows()])
    one_hot = np.zeros(14) # 14 activities
    label = labels[fp]
    one_hot[label] = 1
    return arr, one_hot

def build_inputs(fp_dict):
    """
    Constructs single container for all training data and single container for
    all corresponding one-hot labels

    Parameters:
    --------------
    fp_dict: dict of labels for each filepath, generated by get_labels()

    Returns:
    --------------
    X_all: list of all training data, with dimension
           (num records, num time steps in each record, 3)
    y_all: list of all corresponding one-hot labels, with dimension
           (num records, num time steps in each record, 14)
    """
    X_seq  = []
    y_seq  = []
    #labels = []
    for path in list(fp_dict.keys()):
        data, target = get_data(path, fp_dict)
        X_seq.append(data)
        y_seq.append(list([target for ts in range(len(data))]))
        #labels.append(list([target_label for ts in range(len(data))]))
    X_all = np.asarray(X_seq)
    y_all = np.asarray(y_seq)
    #labels_all = np.asarray(labels)
    # all_labels = [label for label in all_labels for ts in range(128)]
    return X_all, y_all

def write_data(x_data, y_data):
    with open('../../output/test/HMP_X.csv', 'w') as HMP_X:
        writer1 = csv.writer(HMP_X)
        for file_data in x_data:
            writer1.writerow(file_data)
    with open('../../output/test/HMP_y.csv', 'w') as HMP_y:
        writer2 = csv.writer(HMP_y)
        for file_onehot in y_data:
            writer2.writerow(file_onehot)
    # with open('HMP_labels.csv', 'w') as HMP_labels:
    #     writer3 = csv.writer(HMP_labels)
    #     for file_label in labels_data:
    #         writer3.writerow(file_label)
    # HMP_labels.write("{}".format(labels_data))
    return

if __name__ == '__main__':

    mainpath = "../../data/external/HMP"

    activity_labels = get_labels(mainpath)

    # build training inputs and labels
    X, y = build_inputs(activity_labels)

    write_data(X,y)
    
    print()
    print("------------------------------------------------")
    print("| CSV's written to folder accelstm/output/test |")
    print("------------------------------------------------")
